/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ifes.poo1.xadrez.util.persist;

import ifes.poo1.xadrez.model.cdp.jogo.HistoricoPartida;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author Renan
 */
public class DAOHistoricoPartida extends DAOGeneric implements DAO<HistoricoPartida> {

    public HistoricoPartida create() {

        return new HistoricoPartida();
    }

    public void criarTabela() throws ClassNotFoundException, SQLException {
        this.openConnection();

        String sql
                = "CREATE TABLE IF NOT EXISTS HistoricoPartida( "
                + " ID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) NOT NULL,"
                + " dataHoraInicio TIMESTAMP NOT NULL,"
                + " dataHoraFim TIMESTAMP NOT NULL,"
                + " vencedor VARCHAR(255) NOT NULL,"
                + " PRIMARY KEY (ID));"
                + " SHUTDOWN;";

        this.execute(sql);

        this.closeConnection();
    }
    
    public void dropTabela() throws SQLException, ClassNotFoundException{
        this.openConnection();

        String sql
                = "DROP TABLE HistoricoPartida ";

        this.execute(sql);

        this.closeConnection();
    }

    public void insert(HistoricoPartida obj) throws SQLException, ClassNotFoundException {

        this.openConnection();
        SimpleDateFormat formatoData = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        
        String sql = "INSERT INTO HistoricoPartida (dataHoraInicio, dataHoraFim, vencedor) VALUES ('" + formatoData.format(obj.getDataHoraInicio()) + "','" + formatoData.format(obj.getDataHoraFim()) + "','" + obj.getVencedor() + "')";

        int id = this.executeUpdate(sql);
        obj.setId(id);

        this.closeConnection();
    }

    public void update(HistoricoPartida obj) throws SQLException, ClassNotFoundException {
        this.openConnection();
        SimpleDateFormat formatoData = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

        String sql = "UPDATE HistoricoPartida SET"
                + "(dataHoraInicio, dataHoraFim, vencedor) ="
                + "('" + formatoData.format(obj.getDataHoraInicio()) + "','" + formatoData.format(obj.getDataHoraFim()) + "','" + obj.getVencedor() + "')"
                + "WHERE ID =" + obj.getId();

        this.executeUpdate(sql);

        this.closeConnection();
    }

    public void delete(HistoricoPartida obj) throws SQLException, ClassNotFoundException {
        this.openConnection();

        String sql = "DELETE FROM HistoricoPartida "
                + "WHERE ID=" + obj.getId();

        this.executeUpdate(sql);

        this.closeConnection();

    }
    
    public void deleteAll() throws SQLException, ClassNotFoundException {
        this.openConnection();

        String sql = "DELETE FROM HistoricoPartida "
                + "WHERE vencedor LIKE 'Teste' "
                + "OR vencedor LIKE 'Teste2'";

        this.executeUpdate(sql);

        this.closeConnection();
    }

    public HistoricoPartida findbyID(Long id) throws ClassNotFoundException, SQLException {
        this.openConnection();

        String sql = "SELECT * FROM HistoricoPartida WHERE ID =" + id;

        HistoricoPartida historicoPartida = new HistoricoPartida();

        ResultSet rs = this.executeQuery(sql);

        while (rs.next()) {
            historicoPartida.setId(rs.getInt("ID"));
            historicoPartida.setDataHoraInicio(rs.getTimestamp("dataHoraFim"));
            historicoPartida.setDataHoraFim(rs.getTimestamp("dataHoraFim"));
            historicoPartida.setVencedor(rs.getString("vencedor"));
        }

        this.closeConnection();

        return historicoPartida;
    }

    public List<HistoricoPartida> findAll() throws SQLException, ClassNotFoundException {
        this.openConnection();

        String sql = "SELECT * FROM HistoricoPartida";

        HistoricoPartida historicoPartida;
        List<HistoricoPartida> listaHistorico = new ArrayList<>();

        ResultSet rs = this.executeQuery(sql);
        while (rs.next()) {
            historicoPartida = new HistoricoPartida();
            
            historicoPartida.setId(rs.getInt("ID"));
            historicoPartida.setDataHoraInicio(rs.getTimestamp("dataHoraInicio"));
            historicoPartida.setDataHoraFim(rs.getTimestamp("dataHoraFim"));
            historicoPartida.setVencedor(rs.getString("vencedor"));
            
            listaHistorico.add(historicoPartida);
        }

        this.closeConnection();

        return listaHistorico;
    }

}
