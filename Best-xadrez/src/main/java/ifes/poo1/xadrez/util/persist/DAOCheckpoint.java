/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ifes.poo1.xadrez.util.persist;

import ifes.poo1.xadrez.model.cdp.jogo.CheckpointJogo;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author Renan
 */
public class DAOCheckpoint extends DAOGeneric implements DAO<CheckpointJogo> {

    @Override
    public CheckpointJogo create() {

        return new CheckpointJogo();
    }

    public void criarTabela() throws ClassNotFoundException, SQLException {
        this.openConnection();

        String sql
                = " CREATE TABLE IF NOT EXISTS CheckpointJogo( "
                + " ID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) NOT NULL,"
                + " nome VARCHAR(255) NOT NULL,"
                + " jogador VARCHAR(255) NOT NULL,"
                + " comando VARCHAR(255) NOT NULL,"
                + " numeroJogada INTEGER NOT NULL,"
                + " PRIMARY KEY (ID));"
                + " SHUTDOWN;";

        this.execute(sql);

        this.closeConnection();
    }
    
    public void dropTabela() throws SQLException, ClassNotFoundException{
        this.openConnection();

        String sql
                = "DROP TABLE CheckpointJogo ";

        this.execute(sql);

        this.closeConnection();
    }

    @Override
    public void insert(CheckpointJogo obj) throws SQLException, ClassNotFoundException {
        this.openConnection();

        String sql = "INSERT INTO CheckpointJogo (nome, jogador, comando, numeroJogada) VALUES ('" + obj.getNomeJogo() + "','" + obj.getNomeJogador() +  "','" + obj.getComando() + "'," + obj.getNumeroJogada() + ")";

        int id = this.executeUpdate(sql);
        obj.setId(id);

        this.closeConnection();
    }

    @Override
    public void update(CheckpointJogo obj) throws SQLException, ClassNotFoundException {
        this.openConnection();

        String sql = "UPDATE CheckpointJogo SET"
                + "(nome, jogador, comando, numeroJogada) ="
                + "('" + obj.getNomeJogo() + "','" + obj.getNomeJogador() +  "','" + obj.getComando() + "'," + obj.getNumeroJogada() + ") "
                + "WHERE ID =" + obj.getId();

        this.executeUpdate(sql);

        this.closeConnection();
    }

    @Override
    public void delete(CheckpointJogo obj) throws SQLException, ClassNotFoundException {
        this.openConnection();

        String sql = "DELETE FROM CheckpointJogo "
                + "WHERE ID=" + obj.getId();

        this.executeUpdate(sql);

        this.closeConnection();
    }

    public void deleteAllAfterTest() throws SQLException, ClassNotFoundException {
        this.openConnection();

        String sql = "DELETE FROM CheckpointJogo "
                + "WHERE nome LIKE 'Jogo1' "
                + "OR nome LIKE 'Jogo2'";

        this.executeUpdate(sql);

        this.closeConnection();
    }

    @Override
    public CheckpointJogo findbyID(Long id) throws SQLException, ClassNotFoundException {
        this.openConnection();

        String sql = "SELECT * FROM CheckpointJogo WHERE ID =" + id;

        CheckpointJogo checkpointJogo = new CheckpointJogo();

        ResultSet rs = this.executeQuery(sql);

        while (rs.next()) {
            checkpointJogo.setId(rs.getInt("ID"));
            checkpointJogo.setNomeJogo(rs.getString("nome"));
            checkpointJogo.setNomeJogador(rs.getString("jogador"));
            checkpointJogo.setComando(rs.getString("comando"));
            checkpointJogo.setNumeroJogada(rs.getInt("numeroJogada"));
        }

        this.closeConnection();

        return checkpointJogo;
    }

    public List<CheckpointJogo> findAllByNome(String nome) throws SQLException, ClassNotFoundException {
        this.openConnection();

        String sql = "SELECT * FROM CheckpointJogo WHERE nome like '" + nome + "' ORDER BY numeroJogada";

        CheckpointJogo checkpointJogo;
        List<CheckpointJogo> lista = new ArrayList<>();

        ResultSet rs = this.executeQuery(sql);

        while (rs.next()) {
            checkpointJogo = new CheckpointJogo();
            checkpointJogo.setId(rs.getInt("ID"));
            checkpointJogo.setNomeJogo(rs.getString("nome"));
            checkpointJogo.setNomeJogador(rs.getString("jogador"));
            checkpointJogo.setComando(rs.getString("comando"));
            checkpointJogo.setNumeroJogada(rs.getInt("numeroJogada"));
            lista.add(checkpointJogo);
        }

        this.closeConnection();

        return lista;
    }

    @Override
    public List<CheckpointJogo> findAll() throws SQLException, ClassNotFoundException {
        this.openConnection();

        String sql = "SELECT * FROM CheckpointJogo";

        CheckpointJogo checkpointJogo;
        List<CheckpointJogo> lista = new ArrayList<>();

        ResultSet rs = this.executeQuery(sql);
        while (rs.next()) {
            checkpointJogo = new CheckpointJogo();

            checkpointJogo.setId(rs.getInt("ID"));
            checkpointJogo.setNomeJogo(rs.getString("nome"));
            checkpointJogo.setNomeJogador(rs.getString("jogador"));
            checkpointJogo.setComando(rs.getString("comando"));
            checkpointJogo.setNumeroJogada(rs.getInt("numeroJogada"));

            lista.add(checkpointJogo);
        }

        this.closeConnection();

        return lista;
    }

}
