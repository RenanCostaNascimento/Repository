/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ifes.poo1.xadrez.util.persist;

import ifes.poo1.xadrez.model.cdp.jogo.Checkpoint;
import ifes.poo1.xadrez.model.cdp.jogo.Jogo;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

/**
 *
 * @author Renan
 */
public class DAOCheckpoint extends DAOGeneric implements DAO<Checkpoint> {

    @Override
    public Checkpoint create() {

        return new Checkpoint();
    }

    public void criarTabela() throws ClassNotFoundException, SQLException {
        this.openConnection();

        String sql
                = " CREATE TABLE IF NOT EXISTS CheckpointJogo( "
                + " ID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) NOT NULL,"
                + " nome VARCHAR(255) NOT NULL,"
                + " jogo OTHER NOT NULL,"
                + " data TIMESTAMP NOT NULL,"
                + " PRIMARY KEY (ID));";

        this.execute(sql);

        this.closeConnection();
    }

    public void dropTabela() throws SQLException, ClassNotFoundException {
        this.openConnection();

        String sql = "DROP TABLE CheckpointJogo ";

        this.execute(sql);

        this.closeConnection();
    }

    @Override
    public void insert(Checkpoint obj) throws SQLException, ClassNotFoundException {
        this.openConnection();
        SimpleDateFormat formatoData = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String sql = "INSERT INTO CheckpointJogo (nome, jogo, data) VALUES (?,?,?)";
        HashMap<String, Object> objetos = new HashMap<>();
        objetos.put("nome", obj.getNome());
        objetos.put("jogo", obj.getJogo());
        objetos.put("data", formatoData.format(obj.getDataSalvamento()));
        int id = this.executeUpdateSerializable(sql, objetos);
        obj.setId(id);

        this.closeConnection();
    }

    @Override
    public void update(Checkpoint obj) throws SQLException, ClassNotFoundException {
//        this.openConnection();
//
//        String sql;
//        SimpleDateFormat formatoData = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
//        try {
//            sql = "UPDATE CheckpointJogo SET"
//                    + "(nome, jogo, data) ="
//                    + "('" + obj.getNome() + "','" + serializador.serializar(obj.getJogo()) + "','" + formatoData.format(obj.getDataSalvamento()) + "') "
//                    + "WHERE ID =" + obj.getId();
//            this.executeUpdate(sql);
//
//        this.closeConnection();
    }

    @Override
    public void delete(Checkpoint obj) throws SQLException, ClassNotFoundException {
        this.openConnection();

        String sql = "DELETE FROM CheckpointJogo "
                + "WHERE ID=" + obj.getId();

        this.executeUpdate(sql);

        this.closeConnection();
    }

    public void deleteAllAfterTest() throws SQLException, ClassNotFoundException {
        this.openConnection();

        String sql = "DELETE FROM CheckpointJogo "
                + "WHERE nome LIKE 'Jogo1' "
                + "OR nome LIKE 'Jogo2'";

        this.executeUpdate(sql);

        this.closeConnection();
    }

    @Override
    public Checkpoint findbyID(Long id) throws SQLException, ClassNotFoundException {
        this.openConnection();

        String sql = "SELECT * FROM CheckpointJogo WHERE ID =" + id;

        Checkpoint checkpoint = new Checkpoint();

        ResultSet rs = this.executeQuery(sql);

        while (rs.next()) {
            checkpoint.setId(rs.getInt("ID"));
            checkpoint.setNome(rs.getString("nome"));

            checkpoint.setJogo((Jogo) (rs.getObject("jogo")));

            checkpoint.setDataSalvamento(rs.getTimestamp("data"));
        }

        this.closeConnection();

        return checkpoint;
    }
    
    public Checkpoint findbyNome(String nome) throws SQLException, ClassNotFoundException {
        this.openConnection();

        String sql = "SELECT * FROM CheckpointJogo WHERE nome like '" + nome +"'";

        Checkpoint checkpoint = new Checkpoint();

        ResultSet rs = this.executeQuery(sql);

        while (rs.next()) {
            checkpoint.setId(rs.getInt("ID"));
            checkpoint.setNome(rs.getString("nome"));
            checkpoint.setJogo((Jogo) (rs.getObject("jogo")));
            checkpoint.setDataSalvamento(rs.getTimestamp("data"));
        }

        this.closeConnection();

        return checkpoint;
    }

    @Override
    public List<Checkpoint> findAll() throws SQLException, ClassNotFoundException {
        this.openConnection();

        String sql = "SELECT * FROM CheckpointJogo";

        Checkpoint checkpoint;
        List<Checkpoint> lista = new ArrayList<>();

        ResultSet rs = this.executeQuery(sql);
        while (rs.next()) {
            checkpoint = new Checkpoint();

            checkpoint.setId(rs.getInt("ID"));
            checkpoint.setNome(rs.getString("nome"));
            checkpoint.setJogo((Jogo) (rs.getObject("jogo")));
            checkpoint.setDataSalvamento(rs.getTimestamp("data"));

            lista.add(checkpoint);
        }

        this.closeConnection();

        return lista;
    }

}
